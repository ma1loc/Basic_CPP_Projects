<< note is about my learning notes >>

TODO: need to know {
	what is Namespace?
		create nested namespaces.
		create namespace inside another one.
	what is a method?
	what is a calss?
	what is streams in cpp?
	what is objects?
	what is instance?
	what is oop?
	#include <iostream>, #include <stdio.h> ?
	Write a newline and flush the stream. (endl)?
	oop, object, class, instance ?
	what is constructor ?
	objects and instances same thing?
	what is stream, ostream?
	what is static/non-static class member?
	what is encapsulation?
}

NeedToKnow:
	function overloade (in the Cpp we can have function with same name with diffrent arg number)
		Note: if function with no arg and just a change in the return -> error
	OOP → a way (paradigm) of writing code.
	Object → an instance of a class (created from a class blueprint).
	Class → defines the structure (fields/attributes) and behavior (methods/functions) that its objects will have.
	function -> method
	About the Cpp operator:
		:: -> get access to the members of the namespace
		.	-> get access to the members of the class
	static and non-static:
		to access into one of the member of the class have to make members static.
		ex:
			learning_syntax::Say_hello();

about the phone_book project:
	what is a class?

answers about cpp:
	OOP is just a way to orgnize your program
	In OOP, we create class tha is a blueprint, to create a object
	the blueprint in the class have to main things:
	functions -> called in the class methods
	variables -> called in the class attributes
	An object created from a class is called an instance of that class.
	
	stream:
		Stream → the concept of ordered data flow.
		pipeline that moves bytes from one place to another
		Buffer → a storage area that helps the stream flow more efficiently.
	
	about privet / public access:
	
	what is constructor:
		about the constructor:
		constructor is a function inside a class that have no return
		it can be a constructor overloading
		constructor is a function that run we creating an object
			like; first_class test; -> you creating an object

	what is destructor:
		Named ~ClassName().
		Job: clean up resources the object used (memory, files, etc.).
		Does not delete the object itself; memory cleanup is automatic for stack objects or done via delete for heap objects.
		Needed only if the class allocates memory/resources manually.
		If no dynamic allocation, destructor is optional.
		If you create an object inside main() (a stack object), its lifetime lasts until the end of main().
		When main() finishes and the object goes out of scope, the destructor ~Contact() runs automatically.
		This cleans up any resources the object used before the program ends.

	check the cin fail:
		std::cin.fail if is true most clear the Buffer
		std::cin.clear() → erases the error flags of the Buffer
		std::cin.ignore() → cin.ignore() → clears the leftover characters in the input buffer that would otherwise mess up the next read.

what's new in C++:
	OOP (class)
	setter / getter
	public / privet: access specifiers
	Function Overloading
	Ma1loc -> new
	free -> delete
	std::String -> ?
	cout / cin -> ?
	>> / << -> ?
	getline(input stream, buffer)

	class Myclass
	{
		private;
			std::string name;
		public;
			Myclass(); defualt --
			Myclass(const std::string &name); --para constructor
			Myclass(const Myclass &other); -- copy const
			Myclass& operator=(const Myclass &other) -- copy assigment operator
			~Myclass() -- des

			void getrandom() const;
	}


to know about the C00
	what is a class?
	OOP (class)
	setter / getter
	public / privet: access specifiers
	Function Overloading
	Ma1loc -> new
	free -> delete
	std::String -> ?
	cout / cin -> ?
	>> / << -> ?
	getline(input stream, buffer)
	what is constractor && parametrise constractor?
	instance variables?
	static variables ?
	extern ?
